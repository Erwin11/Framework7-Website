extends ../jade/_internal-template

block vars
  - var activeLink = 'docs';
  - var title = 'Router JavaScript API | Framework7 Documentation';

block content
  .docs-wrap
    .docs-nav
      include ../jade/_docs-menu
    .docs-content
      h1 路由器 JS API
      p Framework7 中的路由器使用非常灵活，他可以有多种方式来处理Page:
      ul
        li
          p <a href="pages-ajax.html">Ajax Pages</a> - 从一个指定的URL加载页面，通常是另外一个页面的文件地址（默认行为）。
        li
          p 通过JS API 创建和加载 <a href="pages-dynamic.html">动态页面</a>
        li
          p 如果你的页面已经写在DOM中了，那么你可以直接使用 <a href="pages-inline.html">内联页面</a>，而不用再去加载。
        li
          p 你可以加载使用 <a href="template7-pages.html">Template7</a> 编写的模板
        li
          p 最重要的是，你可以在你的应用中混合使用所有上面的这些方法。
        
      p 在 <a href="views.html">视图</a> 章节中说过， <em>视图是应用中的一个独立部分，她有自己的设置、页面切换和浏览历史</em>。路由器也是初始化之后的视图中的一部分，所以你使用路由器之前必须要记得先初始化视图（使用 <code>myApp.addView()</code> 方法）。
      pre
        code
          | var mainView = myApp.addView('.view-main');
      
      h2 视图中页面切换相关的方法
      p There are two main router methods in View:
      p 在视图中主要有两个路由器方法:
      .method-wrap
        p
          span.method mainView.router.load(<span>options</span>) 
          span - 把一个页面加载到当前视图
      .method-wrap
        p
          span.method mainView.router.back(<span>options</span>) 
          span - 这个方法会触发一个反向的动画并回到上一个页面，也就是浏览历史上的回退

      p 上面这些方法都接受一个 <code>options</code> 对象作为参数，这个参数有如下属性:
      table.params-table
        thead
          tr
            th 参数
            th 类型
            th 说明
        tbody
          tr
            td url
            td string
            td 需要加载的页面的URL
          tr
            td content
            td string or HTMLElement or [jQuery/Zepto/DOM7 collection] or [array of HTMLElement]
            td 需要加载的动态页面的内容
          tr
            td pageName
            td string
            td 需要加载的页面的名称(data-page)。只用在内联页面(DOM cached)。
          tr
            td template
            td function (<a href="template7.html">Template7</a> compiled template)
            td 需要加载并渲染的模板
          tr
            td context
            td object or array
            td 渲染Template7 模板时需要的上下文。这里有更多说明<a href="template7-pages.html">Template7 Pages</a>。
          tr
            td contextName
            td string
            td 可选的。用来渲染 Template7 的 <code>templatesData</code> 的上下文名称/路径。这里查看更多说明 <a href="template7-pages.html">Template7 Pages</a>
          tr
            td query
            td object
            td Object with additionall query parameters that could be retreived in <code>query</code> object of <a href="pages.html#page-data">Page Data</a>
          tr
            td force
            td boolean
            td 可选的。只对 <code>back</code> 方法有效。如果设置为 <code>true</code>，那么会忽略浏览历史中的上一个页面，而是直接加载指定的页面。
          tr
            td ignoreCache
            td boolean
            td 可选的。如果设置为 <code>true</code> ，那么会忽略URL对应的缓存，并且再次通过XHR来加载。
          tr
            td animatePages
            td boolean
            td 可选的。可以覆盖在 View 中的相同参数，打开/关闭页面切换的动画。
          tr
            td reload
            td boolean
            td 可选的。如果设置为 <code>true</code>，那么不会当做新页面加载，而是直接替换当前视图的当前页面。并且在视图浏览历史中替换最后一条历史。
          tr
            td reloadPrevious
            td boolean
            td 可选的。和 <code>reload</code> 一样，不过是对上一个页面。
          tr
            td pushState
            td boolean
            td 可选的。是否把浏览历史存储在浏览器的浏览历史中。(这样可以使用浏览器的后退/前进按钮）
      br
      .important-note
        p 注意， <code>url</code>, <code>content</code>, <code>pageName</code> 这三个参数，你只能同时使用一个。

      h2 视图中页面切换的快捷方式
      h4 加载新页面的方法:
      .method-wrap
        p
          span.method mainView.router.loadPage(<span>url</span>) 
          span - 加载指定的页面到视图中。其实和你在页面中点击一个链接是一样的效果。
        ul.method-parameters
          li
            span.parameter url
            |  - 需要加载的页面的URL
      .method-wrap
        p
          span.method mainView..router.loadContent(<span>content</span>) 
          span - 把动态生成的内容当做一个页面加载
        ul.method-parameters
          li
            span.parameter content
            |  - <span class="parameter-type">string</span> or <span class="parameter-type">HTMLElement</span> or <span class="parameter-type">[jQuery/Zepto/DOM7 collection]</span> or <span class="parameter-type">[array of HTMLElement]</span> - 需要加载的内容
      h4 重新加载当前页面的方法:
      .method-wrap
        p
          span.method mainView.router.reloadPage(<span>url</span>) 
          span - 重新加载指定的页面到视图的当前页面。同时也会修改视图的浏览历史，把最后一条记录替换成指定的URL。
        ul.method-parameters
          li
            span.parameter url
            |  - 需要加载页面的URL
      .method-wrap
        p
          span.method mainView.router.reloadContent(<span>content</span>) 
          span - 重新加载指定的内容到视图的当前页面。同时也会修改视图的浏览历史，把最后一条记录替换成指定的URL。
        ul.method-parameters
          li
            span.parameter content
            |  - <span class="parameter-type">string</span> or <span class="parameter-type">HTMLElement</span> or <span class="parameter-type">[jQuery/Zepto/DOM7 collection]</span> or <span class="parameter-type">[array of HTMLElement]</span> - 需要加载的内容
      h4 重新加载上一个页面的方法（如果视图的DOM中有两个页面）：
      .method-wrap
        p
          span.method mainView.router.reloadPreviousPage(<span>url</span>) 
          span - 重新加载指定的页面到视图的上一个页面。同时也会修改视图的浏览历史，把最后一条记录替换成指定的URL。

        ul.method-parameters
          li
            span.parameter url
            |  - 需要加载页面的URL
      .method-wrap
        p
          span.method mainView.router.reloadPreviousContent(<span>content</span>) 
          span - 重新加载指定的内容到视图的上一个页面。同时也会修改视图的浏览历史，把最后一条记录替换成指定的URL。
        ul.method-parameters
          li
            span.parameter content
            |  - <span class="parameter-type">string</span> or <span class="parameter-type">HTMLElement</span> or <span class="parameter-type">[jQuery/Zepto/DOM7 collection]</span> or <span class="parameter-type">[array of HTMLElement]</span> - 需要加载内容
      h4 刷新页面的方法:
      .method-wrap
        p
          span.method mainView.router.refreshPage() 
          span - 刷新视图的当前页面。和你调用 <code>.reloadPage</code> 方法并且传入当前页面的URL是一样的效果
      .method-wrap
        p
          span.method mainView.router.refreshPreviousPage() 
          span - 刷新视图的上一个页面。和你调用 <code>.reloadPreviousPage</code> 方法并且传入上一个页面的URL是一样的效果
