extends ../jade/_internal-template

block vars
  - var activeLink = 'docs';
  - var title = 'Views | Framework7 Documentation';

block content
  .docs-wrap
    .docs-nav
      include ../jade/_docs-menu
    .docs-content
      h1 视图(views)
      p <strong>View</strong> (&lt;div class="view"&gt;) - 在应用中是一个独立的部分，她有自己的设置、页面切换和历史。每一个视图都可以有不同的导航栏、工具栏布局和不同的样式。所以View就像是嵌在应用中的另一个应用。这种功能可以让你来分别操作一个应用中的不同部分。
      p <strong>Views</strong> (&lt;div class="views"&gt;) - 是所有可见View的容器（不包括Modal和Panel）。<strong>Views</strong> 是你的应用主容器。<strong>一个应用中只能有一个 Views</strong>
      p 下面是 Views 的HTML结构：
      pre
        code.
          &lt;body&gt;
            ...
            &lt;div class="panel panel-left panel-cover"&gt;
              &lt;div class="view panel-view"&gt; ... &lt;/div&gt;
            &lt;/div&gt;
            &lt;!-- Views --&gt;
            &lt;div class="views"&gt;
              &lt;!-- Your main view --&gt;
              &lt;div class="view view-main"&gt;
                &lt;!-- Navbar--&gt;
                &lt;!-- Pages --&gt;
                &lt;!-- Toolbar--&gt;
              &lt;/div&gt;
              &lt;!-- Another view --&gt;
              &lt;div class="view another-view"&gt;
                &lt;!-- Navbar--&gt;
                &lt;!-- Pages --&gt;
                &lt;!-- Toolbar--&gt;
              &lt;/div&gt;          
            &lt;/div&gt;
            &lt;div class="popup"&gt;
              &lt;div class="view popup-view"&gt; ... &lt;/div&gt;
            &lt;/div&gt;
            ...
          &lt;/body&gt;

      p <strong>View</strong> 可以放在应用中的任何位置，但是有一个重要的规则 - 所有的可见 View 都应该放在 <strong>Views</strong> (&lt;div class="views"&gt;)中。因为我们会用来做页面切换的动画。
      h2 Main View
      p 主视图会有一个 <strong>view-main</strong> 的class，因为我们会默认把所有的链接加载的页面放进主视图中。 并且，你使用 pushState hash navigation 的时候也是只在主视图中工作。

      h2 初始化View
      p 在我们的HTML中已经有需要的 view，并且应用已经初始化了，现在我们需要在JavaScript中初始化我们的 view。
      p <strong>注意不是所有的view都需要初始化，只有你需要浏览的那些view才需要。</strong>其他的view（比如 popup）不需要初始化，我们仅仅用来正确的布局navbar，pages和toolbars。
      p 在之前的文章中我们把应用初始化的实例存放在 <b>myApp</b> 变量中。
      pre
        code.
          var myApp = new Framework7({
          // ...
          });

      p 这个实例有很多方法可以操作我们的应用，其中一个方法就可以用来初始化View。
      ul.method-parameters.
        <li><span class="parameter">container</span> - <span class="parameter-type">string</span> or <span class="parameter-type">HTMLElement</span>. If string - CSS selector of View element</li>
        <li><span class="parameter">parameters</span> - <span class="parameter-type">object</span>. Object with View parameters</li>
        <li class="method-returns">This method returns object with View instance.</li>
      h3 View initialization parameters
      table.params-table
        thead
          tr
            th Parameter
            th Type
            th Default
            th Description
        tbody
          tr
            td dynamicNavbar
            td boolean
            td false
            td 在当前View中是否使用动态导航栏
          tr
            td url
            td string
            td undefined
            td View 默认的 url，如果没有定义，则就是当前文件的路径
          tr
            td domCache
            td boolean
            td false
            td 如果设置为true，则所有上一步的页面都不会从DOM中被删除。有的时候这个设置会很有用，比如你有一个表单有5步操作，你想从第5步访问第一步的页面的时候。
          tr
            td linksView
            td string / HTMLElement
            td undefined
            td 另一个View的CSS选择器，可以指定讲当前view中链接加载到另一个View中。
          tr
            th(colspan="4") Navigation
          tr
            td uniqueHistory
            td boolean
            td 
            td Set to true and App will keep View's navigation history unique, it will also remove duplicated pages. By default, equal to the same App's parameter. Allows to override global <a href="init-app.html">App parameter</a> for current View
          tr 
            td animatePages
            td boolean
            td 
            td 如果你想在页面切换时禁用动画，可以把这个值设置为false。默认和 App中对应的参数值相同，可以用来在当前View中重置全局的<a href="init-app.html">App 参数</a>。
          tr
            td preloadPreviousPage
            td boolean
            td 
            td 打开/关闭预加载下一页。为了“返回上一步”能正常工作，最好打开这个选项。默认情况下和 App 中的设置相同。
          tr
            th(colspan="4") 滑动返回上一步
          tr
            td swipeBackPage
            td boolean
            td 
            td 默认和app中对应的参数相同。可以在当前View中重置<a href="init-app.html">App参数</a>
          tr
            td swipeBackPageThreshold
            td number
            td 
            td 默认和app中对应的参数相同。可以在当前View中重置<a href="init-app.html">App参数</a>
          tr
            td swipeBackPageActiveArea
            td number
            td 
            td 默认和app中对应的参数相同。可以在当前View中重置<a href="init-app.html">App参数</a>
          tr
            td swipeBackPageBoxShadow
            td boolean
            td 
            td 默认和app中对应的参数相同。可以在当前View中重置<a href="init-app.html">App参数</a>
          tr
            th(colspan="4") 回调函数(Callbacks)
          tr
            td onSwipeBackMove(callbackData)
            td function
            td 
            td 在滑动返回的时候会调用. <code>callbackData</code> 有下面这些属性:
              ul
                li <code>percentage</code> - 数字, 滑动的比例
                li <code>activePage</code> - 当前页面的HTML元素
                li <code>previousPage</code> - 上一个（左边）页面的HTML元素
                li <code>activeNavbar</code> - 当前页面导航栏的HTML元素（只有动态导航栏时候才有）
                li <code>previousNavbar</code> - 上一个页面（左边）导航栏的HTML元素（只有动态导航栏时候才有）
      p 上面列出了我们所有可以用来初始化view的方法。
      pre
        code.
          var myApp = new Framework7({
            // ...
          });   

          /* Initialize views */
          var mainView = myApp.addView('.view-main', {
            dynamicNavbar: true
          })
          var anotherView = myApp.addView('.another-view');
      p 这个例子中我们没有初始化在 panel 和 popup 中的view，因为我们不需浏览他们。但是如果你需要浏览这些，你就需要初始化他们。
      h2 View 的方法和属性
      p 就像上面的例子一样，我们初始化 view 之后，会把他们的实例存储在变量 <code>mainView</code> 和 <code>anotherView</code> 中。View 实例有很多有用的方法可以用来操作自身。下面我们以 <code>mainView</code> 为例来看看这些方法和参数。
      table.methods-table
        tbody
          tr
            th(colspan="2") 属性(Properties)
          tr
            td mainView.params
            td 初始化参数，你可以读取或者重写某些属性，比如 <code>mainView.params.linksView = '.another-view'</code>
          tr
            td mainView.history
            td 返回一个包含所有历史的字符串数组，其中每一个字符串都是一个页面的URL
          tr
            td mainView.contentCache
            td 返回被缓存的页面。只有当内容是动态生成的时候才可以使用这个属性。
          tr
            td mainView.url
            td 当前页面的URL
          tr
            td mainView.pagesContainer
            td 当前的pagesHTML元素
          tr
            td mainView.activePage
            td 当前页面对应的<a href="pages.html#page-data">Page Data</a>
          tr
            td mainView.main
            td 当前页面是否是 main view
          tr
            th(colspan="2") 方法
          tr
            td.method mainView.loadPage(options)
            td * Look "View Navigation Methods" below

          tr
            td.method mainView.goBack(options)
            td * Look "View Navigation Methods" below
          
          tr
            td mainView.hideNavbar()
            td 在当前View中隐藏导航栏
          tr
            td mainView.showNavbar()
            td 在当前View中显示导航栏
          tr
            td mainView.hideToolbar()
            td 在当前View中隐藏工具栏
          tr
            td mainView.showToolbar()
            td 在当前View中显示工具栏
          tr
            td mainView.destroy()
            td 销毁View，解除事件绑定，移除浏览历史。
      h3 视图浏览方法(view navigation method)
      .method-wrap
        p
          span.method mainView.loadPage(<span>options</span>) 
          span - 把一个页面载入当前视图.
      .method-wrap
        p
          span.method mainView.goBack(<span>options</span>) 
          span - This method will trigger reverse animation to the previous page, in other words - going back in View history
      p Each of these methods accepts <code>options</code> object with the following properties:
      table.params-table
        thead
          tr
            th Parameter
            th Type
            th Default
            th Description
        tbody
          tr
            td url
            td string
            td 
            td URL of the page to load
          tr
            td content
            td string or HTMLElement or [jQuery/Zepto/DOM7 collection] or [array of HTMLElement]
            td 
            td Content of the page to load
          tr
            td forceUrl
            td boolean
            td 
            td Optional. Only for <code>goBack</code> method. If set to <code>true</code> then it will ignore previos page in history and load specified one
          tr
            td ignoreCache
            td boolean
            td 
            td Optional. If set to <code>true</code> then it will ignore if such URL in cache and reload it using XHR again
          tr
            td animatePages
            td boolean
            td 
            td Optional. Allows to override the same View's parameter to enable/disable transition between pages for this case
          tr
            td reload
            td boolean
            td 
            td Optional. If set to <code>true</code> then it will not load page as new page, and just replace currently active View's page with specified one. It will also modify View's history by replacing last history item
          tr
            td reloadPrevious
            td boolean
            td 
            td Optional. Used in addition to <code>reload</code>. Will do the same as <code>reload</code> but for previous page.
      .important-note
        p Note, that you may use only <code>url</code> or <code>content</code> property, not both at the same time

      h3 View Navigation Shortcuts Methods
      h4 Methods to load new page:
      .method-wrap
        p
          span.method mainView.loadPage(<span>url</span>) 
          span - load required page to view. In other word will do the same if you click on some link with this URL
        ul.method-parameters
          li
            span.parameter url
            |  - URL of the page to load
      .method-wrap
        p
          span.method mainView.loadContent(<span>content</span>) 
          span - load dynamically generated content as a new usual page.
        ul.method-parameters
          li
            span.parameter content
            |  - <span class="parameter-type">string</span> or <span class="parameter-type">HTMLElement</span> or <span class="parameter-type">[jQuery/Zepto/DOM7 collection]</span> or <span class="parameter-type">[array of HTMLElement]</span> - content to load as page
      h4 Methods to reload currently active page:
      .method-wrap
        p
          span.method mainView.reloadPage(<span>url</span>) 
          span - reload required page to the currently active view's page. It will also modify View's history and replace last item in history with the specified url
        ul.method-parameters
          li
            span.parameter url
            |  - URL of the page to load
      .method-wrap
        p
          span.method mainView.reloadContent(<span>content</span>) 
          span - reload required content to the currently active view's page. It will also modify View's history and replace last item in history with the specified content
        ul.method-parameters
          li
            span.parameter content
            |  - <span class="parameter-type">string</span> or <span class="parameter-type">HTMLElement</span> or <span class="parameter-type">[jQuery/Zepto/DOM7 collection]</span> or <span class="parameter-type">[array of HTMLElement]</span> - content to load as page
      h4 Methods to reload previous View's page (if there are two pages in View's DOM):
      .method-wrap
        p
          span.method mainView.reloadPreviousPage(<span>url</span>) 
          span - reload required page to the previous view's page. It will also modify View's history and replace related item in history with the specified url
        ul.method-parameters
          li
            span.parameter url
            |  - URL of the page to load
      .method-wrap
        p
          span.method mainView.reloadPreviousContent(<span>content</span>) 
          span - reload required content to the previous view's page. It will also modify View's history and replace related item in history with the specified content
        ul.method-parameters
          li
            span.parameter content
            |  - <span class="parameter-type">string</span> or <span class="parameter-type">HTMLElement</span> or <span class="parameter-type">[jQuery/Zepto/DOM7 collection]</span> or <span class="parameter-type">[array of HTMLElement]</span> - content to load as page
      h4 Methods to refresh page:
      .method-wrap
        p
          span.method mainView.refreshPage() 
          span - refresh currently active view's page. In other words it is the same as .reloadPage with url parameter equal to currently active URL
      .method-wrap
        p
          span.method mainView.refreshPreviousPage() 
          span - refresh previous view's page. The same as .reloadPreviousPage with url parameter equal to previous View's URL

      h2 View Events
      table.events-table
        thead
          tr
            th Event
            th Target
            th Description
        tbody
          tr
            td swipebackmove
            td View Element<span>&lt;div class="view"&gt;</span>
            td Event will be triggered during swipe back move
      h2 Default View URL 
      p If you think that for some reason Framework7 detects wrong default View URL (which is used for navigation history), or if you want to have different default View URL, you can specify it using <code>data-url</code> attribute on View element or using <code>url</code> parameter when you initialze View:
      pre
        code.
          &lt;div class="view" data-url="index2.html"&gt;
      h3 通过其他方式来访问View实例
      p 有时候你需要通过HTML元素来获取View实例。当我们初始化完成View之后，Framework7会在<code>&lt;div class="view"&gt;</code>元素上增加一个属性以便让我们可以通过JS来访问。
      pre
        code.
          var viewsElement = $$('.view-main')[0];
          var viewInstance = viewsElement.f7View;
      p 当然，所有的view实例也都存储在一个属性 <code>views</code> 中，比如我们可以这样找到 main view:
      pre
        code.
          for (var i = 0; i < myApp.views.length; i ++) {
            var view = myApp.views[i];
            if (view.main) myApp.alert('I found main View!')
          }
      h2 下一步
      p <a href="pages.html">Pages</a>
