extends ../jade/_internal-template

block vars
  - var activeLink = 'docs';
  - var title = '无限滚动 | Framework7 文档';

block content
  .docs-demo-device
    iframe(width="320", height="548", frameborder="0", scrolling="on")
    .fade-overlay
  .docs-wrap
    .docs-nav
      include ../jade/_docs-menu
    .docs-content.with-device
      .full-width
        h1 无限滚动
        p 无限滚动用来在页面滚动到接近底部时进行加载新内容或其他任何须要的动作。

        h2 无限滚动HTML结构
        p 你需要做的只有在可滚动的内容容器元素上添加“infinite-scroll” class，具体到我们的页面就是<code>&lt;div class="page-content"&gt;</code>:
        pre
          code
            | &lt;div class="page"&gt;
            |     &lt;div class="page-content infinite-scroll" data-distance="100"&gt;
            |         ... 
            |     &lt;/div&gt;
            | &lt;/div&gt;
        p 其中:
        ul
          li
            p <code>div class="page-content infinite-scroll"</code> 是我们无限滚动页面的容器
          li
            p <code>data-distance</code>属性用来配置页面滚动到离底部多远时触发无限滚动事件，默认是<b>50</b> (px)
        h2 无限滚动事件
        table.events-table
          thead
            tr
              th Event
              th Target
              th Description
          tbody
            tr
              td infinite
              td 可无限滚动的页面的容器<span>&lt;div class="page-content infinite-scroll"&gt;</span>
              td 事件会在页面滚动至距底部还有data-distance所配置的距离时触发
        h2 无限滚动API
        p 有2个f7应用实例方法可用来配合无限滚动组件使用:
        .method-wrap
          p
            span.method myApp.attachInfiniteScroll(<span>container</span>) 
            span - 为指定的HTML元素容器添加无限滚动事件监听器
          ul.method-parameters
            li
              span.parameter parameters
              |  - <span class="parameter-type">HTMLElement</span> or <span class="parameter-type">string</span> (完整CSS选择器) - 可无限滚动内容区的容器. 必需.
        .method-wrap
          p
            span.method myApp.detachInfiniteScroll(<span>container</span>) 
            span - 为指定的HTML元素容器删除无限滚动事件监听器
          ul.method-parameters
            li
              span.parameter parameters
              |  - <span class="parameter-type">HTMLElement</span> or <span class="parameter-type">string</span> (完整CSS选择器) - 可无限滚动内容区的容器. 必需.
        .important-note
          p 注意，仅在你使用myApp.detachInfiniteScroll方法删除过事件监听器后,才可能需要使用 myApp.attachInfiniteScroll 方法，因为无限滚动组件的事件监听器会在“pageInit”时被自动添加。
      h2(data-device-preview="../docs-demos/infinite-scroll.html") 栗子们
      pre
        code
          | &lt;div class="page-content infinite-scroll"&gt;
          |   &lt;div class="list-block"&gt;
          |     &lt;ul&gt;
          |       &lt;li class="item-content"&gt;
          |         &lt;div class="item-inner"&gt;
          |           &lt;div class="item-title"&gt;Item 1&lt;/div&gt;
          |         &lt;/div&gt;
          |       &lt;/li&gt;
          |       &lt;li class="item-content"&gt;
          |         &lt;div class="item-inner"&gt;
          |           &lt;div class="item-title"&gt;Item 2&lt;/div&gt;
          |         &lt;/div&gt;
          |       &lt;/li&gt;
          |       ...
          |       &lt;li class="item-content"&gt;
          |         &lt;div class="item-inner"&gt;
          |           &lt;div class="item-title"&gt;Item 20&lt;/div&gt;
          |         &lt;/div&gt;
          |       &lt;/li&gt;
          |     &lt;/ul&gt;
          |   &lt;/div&gt;
          |   &lt;!-- Preloader --&gt;
          |   &lt;div class="infinite-scroll-preloader"&gt;
          |     &lt;div class="preloader"&gt;&lt;/div&gt;
          |   &lt;/div&gt;
          | &lt;/div&gt; 
      pre
        code
          | .infinite-scroll-preloader {
          |   margin-top:-20px;
          |   margin-bottom: 10px;
          |   text-align: center;
          | }
          | .infinite-scroll-preloader .preloader {
          |   width:34px;
          |   height:34px;
          | }        
      pre
        code
          | var myApp = new Framework7(); 
          | 
          | var $$ = Dom7;
          | 
          | // Loading flag
          | var loading = false;
          | 
          | // Last loaded index
          | var lastIndex = $$('.list-block li').length;
          | 
          | // Max items to load
          | var maxItems = 60;
          | 
          | // Append items per load
          | var itemsPerLoad = 20;
          | 
          | // Attach 'infinite' event handler
          | $$('.infinite-scroll').on('infinite', function () {
          | 
          |   // Exit, if loading in progress
          |   if (loading) return;
          | 
          |   // Set loading flag
          |   loading = true;
          | 
          |   // Emulate 1s loading
          |   setTimeout(function () {
          |     // Reset loading flag
          |     loading = false;
          | 
          |     if (lastIndex &gt;= maxItems) {
          |       // Nothing more to load, detach infinite scroll events to prevent unnecessary loadings
          |       myApp.detachInfiniteScroll($$('.infinite-scroll'));
          |       // Remove preloader
          |       $$('.infinite-scroll-preloader').remove();
          |       return;
          |     }
          | 
          |     // Generate new items HTML
          |     var html = '';
          |     for (var i = lastIndex + 1; i &lt;= lastIndex + itemsPerLoad; i++) {
          |       html += '&lt;li class="item-content"&gt;&lt;div class="item-inner"&gt;&lt;div class="item-title"&gt;Item ' + i + '&lt;/div&gt;&lt;/div&gt;&lt;/li&gt;';
          |     }
          | 
          |     // Append new items
          |     $$('.list-block ul').append(html);
          | 
          |     // Update last loaded index
          |     lastIndex = $$('.list-block li').length;
          |   }, 1000);
          | });          
