extends ../jade/_internal-template

block vars
  - var activeLink = 'docs';
  - var title = 'Framework7 Plugins API | Framework7 Documentation';

block content
  .docs-wrap
    .docs-nav
      include ../jade/_docs-menu
    .docs-content
      h1 Framework7插件API
      p Framework7拥有简单易用的插件API，允许你创造自己的Framework7插件。
      //- p Framework7's Plugin system is very interesting and simple, it is based on so called "hooks", "prevents" (not yet in core) and "process" (not yet in core). Hooks are like callbacks which are called in many different core parts that allow your plugin to execute code in required moments or to handle required data.
      h2 插件文件结构
      p 首先，我们来看一下基本插件的JS结构：
      p <b>framework7.myplugin.js</b>:
      pre
        code
          | Framework7.prototype.plugins.myPlugin = function (app, params) {
          |     ... plugin code here ...
          | };            
      p 其中
      ul
        li <code>myPlugin</code> - 插件名称，需要唯一，当用户向你的插件传递参数的时候，需要用到这个名称
        li <code>app</code> - 插件函数的第一个参数，它是一个<a href="init-app.html">初始化的实例</a>
        li <code>params</code> - 插件参数（非必需）
      h2 插件参数
      p 我们的插件要怎样接收，作为<code>params</code>参数传递给插件原型函数的个人参数呢？它相当简单，只需要在App初始化的时候，指定插件的名字，然后提供参数：
      pre
        code
          | var myApp = new Framework7({
          |     modalTitle: 'My App',
          |     pushState: true,
          |     /* 
          |     Here comes your plugin parameters that will be passed to your plugin in case of parameter name is the same as plugin name:
          |     */
          |     myPlugin: {
          |         foo: 'bar'
          |     }
          | });
      p 现在，在插件中：     
      pre
        code
          | Framework7.prototype.plugins.myPlugin = function (app, params) {
          |     console.log(params.foo); // 'bar'
          | };        
      h2 插件代码
      p 怎样让我们的插件执行期望的功能呢？
      p Framework7的插件系统非常有趣而简单，它基于"hooks", "prevents" (暂时不在内核中) and "process" (暂时不在内核中)： 
      ul
        li <b>hooks</b> - 与一般的回调函数一样，它们在应用的很多内核部件中被调用。它们允许你的插件在指定的时刻执行代码，或者在不同的阶段处理数据。每个hook接收不同的参数。
        li <b>prevents</b> - 允许禁用应用的默认行为，比如它们可以禁用默认的页面动画，而使用你自己的
        li <b>processes</b> - 它们像预处理器一样，每道处理步骤都会读取数据，然后修改它
      p 所以，插件返回的对象，应该含有3个对象成员（hooks，prevents和processes）：
      pre
        code
          | Framework7.prototype.plugins.myPlugin = function (app, params) {
          | 
          |     /* 
          |     Local plugin scope 
          |     */
          | 
          |     // Handle app init hook
          |     function handleAppInit() {
          |         console.log('app initialized');
          |     }
          | 
          |     // Return hooks
          |     return {
          |         hooks: {
          |             // App init hook
          |             appInit: handleAppInit
          |         }
          |     };    
          | }; 
      .important-note
        p 注意，插件会在应用初始化的第一个阶段初始化，有些东西还无法获取（比如上面例子提到的“local plugin scope”）。如果你想要在应用完全初始化之后再执行代码，应该使用‘appInit’ hook
      h2 可用的Hooks
      p 我们首先看一下现有可用的hooks（这个列表会扩展的）和它们的参数：
      table.methods-table
        tr
          td appInit
          td 在App完全初始化时，会被触发
        tr
          td navbarInit (<span>navbar, pageData</span>)
          td 和"navbarInit"事件一样
        tr
          td pageInit (<span>pageData</span>)
          td 和"pageInit"事件（或者是同名的页面回调函数）一样。在Framework7初始化页面组件和导航栏之后，会被触发
        tr
          td pageBeforeInit (<span>pageData</span>)
          td 和"pageBeforeInit"事件（或者是同名的页面回调函数）一样。在Framework7将要向DOM插入新页面之前，会被触发
        tr
          td pageBeforeAnimation (<span>pageData</span>)
          td 和"pageBeforeAnimation"事件（或者是同名的页面回调函数）一样。在每样东西都已经初始化，并且页面（和导航栏）做好动画准备的时候，会被触发
        tr
          td pageAfterAnimation (<span>pageData</span>)
          td 和"pageAfterAnimation"事件（或者是同名的页面回调函数）一样。在页面（和导航栏）动画结束后，会被触发
        tr
          td pageBeforeRemove (<span>pageData</span>)
          td 和"pageBeforeRemove"事件（或者是同名的页面回调函数）一样。在Page要从DOM中被删除时，会被触发
        tr
          td addView (<span>view</span>)
          td 在用户通过调用<code>myApp.addView</code>来添加页面时，会被触发。它接收初始化的页面实例作为参数
        tr
          td loadPage (<span>view, url, content</span>)
          td 在页面加载进程的最开始，即它还没有被加入DOM的时候，会被触发
        tr
          td goBack (<span>view, url, preloadOnly</span>)
          td 在返回操作的最开始，会被触发
        tr
          td swipePanelSetTransform (<span>views, panel, percentage</span>)
          td 在滑动面板上滑动时，会被触发
      h2 安装插件
      p 要想安装插件，你只需要把它放到Framework7 JavaScript库之后：
      pre
        code
          | &lt;body&gt;
          |     ...
          |     &lt;script src="path/to/framework7.js"&gt;&lt;/script&gt;
          |     &lt;script src="path/to/framework7.myplugin.js"&gt;&lt;/script&gt;
          | &lt;/body&gt;
      h2 示例插件       
      p 让我们来创建简单的调试示例插件。它只会记录所有的hooks和它们的参数，不做其他事情
      p <b>framework7.debug.js</b>:
      pre
        code
          | Framework7.prototype.plugins.debug = function (app, params) {
          |     // exit if not enabled
          |     if (!params) return;
          | 
          |     return {
          |         hooks: {
          |             appInit: function () {
          |                 console.log ('appInit');
          |             },
          |             navbarInit: function (navbar, pageData) {
          |                 console.log('navbarInit', navbar, pageData);
          |             },
          |             pageInit: function (pageData) {
          |                 console.log('pageInit', pageData);
          |             },
          |             pageBeforeInit: function (pageData) {
          |                 console.log('pageBeforeInit', pageData);
          |             },
          |             pageBeforeAnimation: function (pageData) {
          |                 console.log('pageBeforeAnimation', pageData);
          |             },
          |             pageAfterAnimation: function (pageData) {
          |                 console.log('pageAfterAnimation', pageData);
          |             },
          |             pageBeforeRemove: function (pageData) {
          |                 console.log('pageBeforeRemove', pageData);
          |             },
          |             addView: function (view) {
          |                 console.log('addView', view);
          |             },
          |             loadPage: function (view, url, content) {
          |                 console.log('loadPage', view, url, content);
          |             },
          |             goBack: function (view, url, preloadOnly) {
          |                 console.log('goBack', view, url, preloadOnly);
          |             },
          |             swipePanelSetTransform: function (views, panel, percentage) {
          |                 console.log('swipePanelSetTransform', views, panel, percentage);
          |             }
          |         }
          |     };
          | };
      p 我们需要把它添加到应用中：
      pre
        code
          | &lt;body&gt;
          |     ...
          |     &lt;script src="path/to/framework7.js"&gt;&lt;/script&gt;
          |     &lt;script src="path/to/framework7.debug.js"&gt;&lt;/script&gt;
          |     &lt;script src="path/to/myapp.js"&gt;&lt;/script&gt;
          | &lt;/body&gt;
      p 并且在<b>myapp.js</b>中启用它：
      pre
        code
          | var myApp = new Framework7({
          |     debug: true
          | });