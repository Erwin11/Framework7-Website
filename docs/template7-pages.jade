extends ../jade/_internal-template

block vars
  - var activeLink = 'docs';
  - var title = 'Template7 Pages | Framework7 Documentation';

block content
  .docs-wrap
    .docs-nav
      include ../jade/_docs-menu
    .docs-content
      h1 Template7 页面
      p Framework7 可以让你使用 Template7 用特定的上下文来渲染你的ajax页面或者动态页面，并且提供了很多不同的方法来实现.
      p 首先，我们需要在 <a href="init-app.html">应用初始化</a> 的时候传入一个参数来开启这个功能：
      pre
        code
          | var myApp = new Framework7({
          |     template7Pages: true // enable Template7 rendering for Ajax and Dynamic pages
          | });
      p 这就是所有你需要做的，现在所有的Ajax和动态页面都会当做 Template7 模板来渲染，所以你可以在其中使用 <a href="template7.html">Template7 语法</a>
      h2 模板/页面 数据
      p 现在我们需要学习的是，如何把特定的上下文传递给指定的页面。我们可以在应用初始化的时候，传入一个附加的 <code>templateData</code> 参数：
      pre
        code.js
          | var myApp = new Framework7({
          |     template7Pages: true, //enable Template7 rendering for pages
          | 
          |     //Specify templates/pages data
          |     template7Data: {
          |         // This context will applied for page/template with "about.html" URL
          |         'url:about.html': {
          |             name: 'John Doe',
          |             age: 38,
          |             company: 'Apple',
          |             position: 'Developer'
          |         },
          | 
          |         // This context will applied for page/template with data-page="contacts"
          |         'page:contacts': {
          |             tel: '(999)-111-22-33',
          |             email: 'contact@john.doe'
          |         },
          | 
          |         // Plain data object
          |         'languages': {
          |             'frontend': [
          |                 {
          |                     name:'JavaScript',
          |                     description: 'Dynamic computer programming language[5]. It is most commonly used as part of web browsers, whose implementations allow...'
          |                 },
          |                 {
          |                     name:'CSS',
          |                     description: 'Style sheet language used for describing the look and formatting of a document written in a markup language...'
          |                 },
          |             ],
          |             'backend': [
          |                 {
          |                     name: 'PHP',
          |                     description: 'Server-side scripting language designed for web development but also used as a general-purpose programming language...'
          |                 },
          |                 {
          |                     name: 'Ruby',
          |                     description: 'Dynamic, reflective, object-oriented, general-purpose programming language...'
          |                 }
          |             ]
          |         }
          |     }
          | });
          | 
          | // Add and init View
          | var mainView = myApp.addView('.view-main');
          | 
      h3 访问和修改 模板/页面 数据
      p 我们可以在任何时候访问和修改 <code>templateData</code>。你可以通过全局的 <code>Templates.data</code> 属性，也可通过他的别名 <code>myApp.templatesData</code> 来访问
      h3 页面和URL 规则
      p 这个很简单：
      ul
        li 
          p 如果你的属性名是以 <code>url:</code> 开头的，那么这个上下文会被应用在这个特定的URL对应的页面上
        li 
          p 如果你的属性名是以 <code>page:</code> 开头的，那么这个上下文会被用在有相同的 <code>data-page</code> 的页面上
      p 推荐使用 <code>url:</code> 的方式来指定，因为这样检测的更准确一些。
      p 但是，有些时候可能不能用 <code>url:</code>，比如你的页面有不同的GET参数(比如 about.html?id=1 和 about.html?id=2)，或者是动态页面，这种情况下我们要使用 <code>page:</code> 规则：
        
      p 对于上面定义的模板数据，我们在页面中可以这样使用：
      p
        b about.html:
      pre
        code
          | &lt;div class="page" data-page="about"&gt;
          |     &lt;div class="page-content"&gt;
          |         &lt;p&gt;Hello, my name is {{name}} and i am {{age}} years old {{position}} at {{company}}&lt;/p&gt;
          |     &lt;/div&gt;
          | &lt;/div&gt;
      p
        b contacts.html:
      pre
        code          
          | &lt;div class="page" data-page="contacts"&gt;
          |     &lt;div class="page-content"&gt;
          |         &lt;p&gt;You can contact me:&lt;/p&gt;
          |         &lt;p&gt;By phone: {{tel}}&lt;/p&gt;
          |         &lt;p&gt;By email: {{email}}&lt;/p&gt;
          |     &lt;/div&gt;
          | &lt;/div&gt;
      h3 普通数据
      p 在模板数据中定义普通数据，可能会更灵活，更容易处理。我们可以通过在链接上使用 <code>data-context-name</code> 属性来加和使用这些数据.
      p 让我们看看下面这个例子，我们有一个首页，首页中有一个链接会跳转到语言列表页面，语言列表页面会有一个链接跳转到语言详情页面：
      p
        b index.html:
      pre
        code
          | &lt;div class="list-block"&gt;
          |   &lt;ul&gt;
          |     &lt;li&gt;
          |       &lt;a href="languages.html" class="item-link item-content" data-context-name="languages"&gt;
          |           &lt;div class="item-inner"&gt;
          |             &lt;div class="item-title"&gt;Languages&lt;/div&gt;
          |           &lt;/div&gt;
          |       &lt;/a&gt;
          |     &lt;/li&gt;
          |   &lt;/ul&gt;
          | &lt;/div&gt;
      p
        b languages.html:      
      pre
        code
          | &lt;div class="page" data-page="languages"&gt;
          |   &lt;div class="page-content"&gt;
          |     &lt;div class="content-block-title"&gt;Frontend&lt;/div&gt;
          |     &lt;div class="list-block"&gt;
          |       &lt;ul&gt;
          |         &lt;!-- Iterate through frontend languages --&gt;
          |         {{#each this.frontend}}
          |         &lt;li&gt;
          |           &lt;!-- As a context name for this link we pass context path from template7Data root --&gt;
          |           &lt;a href="language-details.html" class="item-link item-content" data-context-name="languages.frontend.{{@index}}"&gt;
          |               &lt;div class="item-inner"&gt;
          |                 &lt;div class="item-title"&gt;{{this.name}}&lt;/div&gt;
          |               &lt;/div&gt;
          |           &lt;/a&gt;
          |         &lt;/li&gt;
          |         {{/each}}
          |       &lt;/ul&gt;
          |     &lt;/div&gt;
          |     &lt;div class="content-block-title"&gt;Backend&lt;/div&gt;
          |     &lt;div class="list-block"&gt;
          |       &lt;ul&gt;
          |         &lt;!-- Iterate through backend languages --&gt;
          |         {{#each this.backend}}
          |         &lt;li&gt;
          |           &lt;!-- As a context name for this link we pass context path from template7Data root --&gt;
          |           &lt;a href="language-details.html" class="item-link item-content" data-context-name="languages.backend.{{@index}}"&gt;
          |               &lt;div class="item-inner"&gt;
          |                 &lt;div class="item-title"&gt;{{this.name}}&lt;/div&gt;
          |               &lt;/div&gt;
          |           &lt;/a&gt;
          |         &lt;/li&gt;
          |         {{/each}}
          |       &lt;/ul&gt;
          |     &lt;/div&gt;
          |   &lt;/div&gt;
          | &lt;/div&gt;          
      p
        b language-details.html:      
      pre
        code
          | &lt;div class="page" data-page="language-details"&gt;
          |   &lt;div class="page-content"&gt;
          |     &lt;div class="content-block-title"&gt;{{name}}&lt;/div&gt;
          |     &lt;div class="content-block"&gt;
          |       &lt;p&gt;{{description}}&lt;/p&gt;
          |     &lt;/div&gt;
          |   &lt;/div&gt;
          | &lt;/div&gt;
      p 在链接上使用 <code>data-context-name</code> 属性可以传入 <code>templatesData</code> 中定义的上下文。他也支持通过上下文路径(通过使用 <code>.</code> 号)来访问子属性.

      p 比如，我们可以创建一个使用上下文路径的链接指向详情页：

      pre
        code
          | &lt;a href="language-details.html" data-context-name="languages.frontend.1"&gt;CSS&lt;/a&gt;
      p 在JS中，我们也可以使用视图的路由器的 <code>.load()</code> 方法和 <code>contextName</code> 属性：
      pre
        code.js
          | mainView.router.load({
          |     url: 'language-details.html',
          |     contextName: 'languages.frontend.0'
          | })
      h2 传入自定义的上下文
      p Framework7 可以让我们在任何Ajax或者动态页面中传入自定义的上下文。
      p 我们可以通过链接上的 <code>data-context</code> 属性来给任何页面传递上下文，这个属性值是一个合法的序列化的JSON字符串：
      pre
        code
          | &lt;a href='contacts.html' data-context='{"tel": "(999)-111-22-33", "email": "contact@john.doe"}'&gt;Contacts&lt;/a&gt;
      p 或者，在JS中，我们可以使用视图的路由器的 <code>.load()</code> 方法传入一个 <code>context</code> 属性：
      pre
        code.js
          | mainView.router.load({
          |     url: 'contacts.html',
          |     context: {
          |       tel: '(999)-111-22-33',
          |       email: 'contact@john.doe'
          |     }
          | })
      p 或者，我们可以指定一个 <code>templatesData</code> 中的普通数据:
      pre
        code.js
          | mainView.router.load({
          |     url: 'language-details.html',
          |     context: Template7.data.languages.frontend[1] // CSS
          | })      

      h2 直接加载模板
      p 如果你使用 <a href="template7-auto-compilation.html">自动编译模板</a>，你可以直接把他们当做动态页面渲染和加载
      p 我们看看另一个模板，在index文件中已经定义了下面这些页面的模板：
      pre
        code.js
          | &lt;script id="contactsTemplate" type="text/template7"&gt;
          |   &lt;div class="page" data-page="contacts"&gt;
          |     &lt;div class="page-content"&gt;
          |         &lt;p&gt;You can contact me:&lt;/p&gt;
          |         &lt;p&gt;By phone: {{tel}}&lt;/p&gt;
          |         &lt;p&gt;By email: {{email}}&lt;/p&gt;
          |     &lt;/div&gt;
          |   &lt;/div&gt;
          | &lt;/script&gt;
          | 
          | &lt;script id="aboutTemplate" type="text/template7"&gt;
          |   &lt;div class="page" data-page="about"&gt;
          |     &lt;div class="page-content"&gt;
          |         &lt;p&gt;Hell, my name is {{name}}. I am {{age}} years old:&lt;/p&gt;
          |     &lt;/div&gt;
          |   &lt;/div&gt;
          | &lt;/script&gt;
      p 在我们的JS中:
      pre
        code.js
          | var myApp = new Framework7({
          |     precompileTemplates: true, //
          |     template7Pages: true, //enable Template7 rendering for pages
          |     template7Data: {
          |         // Data for contacts page
          |         'page:contacts': {
          |               tel: '(999)-111-22-33',
          |               email: 'contact@john.doe'
          |         }
          |     }
          | })
      p 现在，我们需要加载这些页面。
      p 对于 "contacts" 页面，我们在 <code>templatesData</code> 中已经有需要的数据。所以我们使用 <code>data-template</code> 属性指定模板id就行了：
      pre
        code
          | &lt;!-- We need to specify template id in data-template attribute --&gt;
          | &lt;a href="#" data-template="contactsTemplate"&gt;Contacts&lt;/a&gt;
      p 对于about页面，我们没有指定任何数据，所以我们可以传入自定义的上下文：

      pre
        code
          | &lt;a href="#" data-template="aboutTemplate" data-context='{"name": "John Doe", "age": "35"}'&gt;About Me&lt;/a&gt;
      p 当然，我们也可以通过JS来做，直接使用视图的 <code>.load()</code> 方法并传入一个 <code>template</code> 属性：
      pre
        code
          | //To load contacts page from template:
          | mainView.router.load({
          |     template: Template7.templates.contactsTemplate // template already compiled and available as a property of Template7.templates
          | })
          | 
          | //To load about page from template with custom data:
          | mainView.router.load({
          |     template: Template7.templates.aboutTemplate, // template already compiled and available as a property of Template7.templates
          |     context: {
          |         name: 'John Doe',
          |         age: 35
          |     }
          | })
      h2 URL 参数
      p 当我们用 template7 渲染Ajax 页面的时候，他的上下文总是会被拓展到一个包含了URL GET参数的  <code>url_query</code> 属性上去：
      pre
        code
          | &lt;a href="person.html?firstname=John&lastname=Doe&age=33"&gt;John Doe&lt;/a&gt;
          | &lt;a href="person.html?firstname=Mike&lastname=Doe&age=26"&gt;Mike Doe&lt;/a&gt;
      p
        b person.html
      pre
        code
          | &lt;div class="page" data-page="person"&gt;
          |     &lt;div class="page-content"&gt;
          |         &lt;p&gt;Hello, my name is {{url_query.firstname}} {{url_query.lastname}}. I am {{url_query.age}} years old.&lt;/p&gt;
          |     &lt;/div&gt;
          | &lt;/div&gt;
